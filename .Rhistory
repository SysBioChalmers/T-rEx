print(paste(n,c))
data<-data[-(1:2),]
naval<-as.numeric(as.character(rownames(data[is.na(data),])))
if(str_count(as.character(data[1,6]), "T")/nchar(as.character(data[1,6]))>0.65 |(str_count(as.character(data[1,6]), "A")/nchar(as.character(data[1,6]))>0.65 )){
#if using 2 motifs
# motif<-as.character(data[(naval[1]+1):(nrow(data)-3),6])
# motif1<-as.character(data[(naval[1]+1):(nrow(data)-3),5])
# motif2<-as.character(data[(naval[1]+1):(nrow(data)-3),7])
#if using 3 motifs
motif<-as.character(data[(naval[1]+1):(naval[2]-3),6])
motif1<-as.character(data[(naval[1]+1):(naval[2]-3),5])
motif2<-as.character(data[(naval[1]+1):(naval[2]-3),7])
# }else if(str_count(as.character(data[1,6]), "G")/nchar(as.character(data[1,6]))>0.5 |str_count(as.character(data[1,6]), "T")/nchar(as.character(data[1,6]))>0.65 |(str_count(as.character(data[1,6]), "A")/nchar(as.character(data[1,6]))>0.65 )){
#   motif<-as.character(data[(naval[2]+1):nrow(data),6])
#   motif1<-as.character(data[(naval[2]+1):nrow(data),5])
#   motif2<-as.character(data[(naval[2]+1):nrow(data),7])
}else{
motif<-as.character(data[1:(naval[1]-3),6])
motif1<-as.character(data[1:(naval[1]-3),5])
motif2<-as.character(data[1:(naval[1]-3),7])
}
for (i in 1:length(motif)){
if (nchar(motif1[i])<10){
if(motif1[i]=="."){
motif1[i]<-"TTTTTTTTTT"
}else{
nc<-gsub(", ","",toString(rep("T",(10-nchar(motif1[i])))))
motif1[i]<-gsub(", ", "", toString(c(nc,motif1[i])))
}
}
if(nchar(motif2[i])<10){
if(motif2[i]=="."){
motif2[i]<-"TTTTTTTTTT"
}else{
nc2<-gsub(", ","",toString(rep("T",(10-nchar(motif2[i])))))
motif2[i]<-gsub(", ", "", toString(c(motif2[i],nc2)))
}}
}
motif102<-c()
for (i in 1:length(motif)){
motif102[i]<-gsub(", ","",toString(c(motif1[i],motif[i],motif2[i])))
}
motifsp<-c()
motifsp<-matrix(nrow=length(motif),ncol=nchar(motif102[1]))
for(o in 1:length(motif)){
q<-sapply(seq(from=1, to=nchar(motif102[o]), by=1), function(i) substr(motif102[o], i, i))
motifsp[o,1:(nchar(motif102[1]))]<-t(matrix(q))
}
motifsp2<-motifsp
motifsp3<-matrix(nrow=length(motif),ncol=nchar(motif102[1]))
motifsp2[motifsp2=="A"]=as.numeric(1)
motifsp2[motifsp2=="C"]=as.numeric(2)
motifsp2[motifsp2=="G"]=as.numeric(3)
motifsp2[motifsp2=="T"]=as.numeric(4)
motifsp3<-apply(motifsp2, 2, as.numeric)
motifsp4<-motifsp3
motifsp4<-motifsp4[nrow(motifsp4):1,ncol(motifsp4):1]
motifsp5<-matrix(nrow=nrow(motifsp4),ncol=ncol(motifsp4))
motifsp5[motifsp4==1]<-4
motifsp5[motifsp4==2]<-3
motifsp5[motifsp4==3]<-2
motifsp5[motifsp4==4]<-1
motifsp_rev<-motifsp
motifsp_rev<-motifsp_rev[nrow(motifsp_rev):1,ncol(motifsp_rev):1]
motifsp_rev2<-matrix(nrow=nrow(motifsp_rev),ncol=ncol(motifsp_rev))
motifsp_rev2[motifsp_rev=="A"]<-"T"
motifsp_rev2[motifsp_rev=="T"]<-"A"
motifsp_rev2[motifsp_rev=="G"]<-"C"
motifsp_rev2[motifsp_rev=="C"]<-"G"
pwmtbl3<-matrix(ncol=nchar(motif102[1]),nrow=4)
for (i in 1:nchar(motif102[1])){
pwmtbl3[1,i]<- sum(motifsp[,i]=="A")
pwmtbl3[2,i]<- sum(motifsp[,i]=="C")
pwmtbl3[3,i]<- sum(motifsp[,i]=="G")
pwmtbl3[4,i]<- sum(motifsp[,i]=="T")
}
pwmtbl3<-(pwmtbl3/sum(pwmtbl3[,1]))
# pwmtbl2<-matrix(ncol=nchar(motif102[1]),nrow=4)
# for (i in 1:nchar(motif102[1])){
#   pwmtbl2[1,i]<- sum(motifsp_rev2[,i]=="A")
#   pwmtbl2[2,i]<- sum(motifsp_rev2[,i]=="C")
#   pwmtbl2[3,i]<- sum(motifsp_rev2[,i]=="G")
#   pwmtbl2[4,i]<- sum(motifsp_rev2[,i]=="T")
# }
# pwmtbl2<-(pwmtbl2/sum(pwmtbl2[,1]))
motifsp6<-c()
motifsp6<-matrix(nrow=length(motif),ncol=nchar(motif[1]))
for(o in 1:length(motif)){
q<-sapply(seq(from=1, to=nchar(motif[o]), by=1), function(i) substr(motif[o], i, i))
motifsp6[o,1:(nchar(motif[1]))]<-t(matrix(q))
}
pwmtbl4<-matrix(ncol=ncol(motifsp6),nrow=4)
for (i in 1:nchar(motif[1])){
pwmtbl4[1,i]<- sum(motifsp6[,i]=="A")
pwmtbl4[2,i]<- sum(motifsp6[,i]=="C")
pwmtbl4[3,i]<- sum(motifsp6[,i]=="G")
pwmtbl4[4,i]<- sum(motifsp6[,i]=="T")
}
motifrev<-matrix(ncol=ncol(motifsp6),nrow=nrow(motifsp6))
motifrev[motifsp6=="A"]<-"T"
motifrev[motifsp6=="T"]<-"A"
motifrev[motifsp6=="G"]<-"C"
motifrev[motifsp6=="C"]<-"G"
pwmtbl5<-matrix(ncol=ncol(motifsp6),nrow=4)
for (i in 1:nchar(motif[1])){
pwmtbl5[1,i]<- sum(motifrev[,i]=="A")
pwmtbl5[2,i]<- sum(motifrev[,i]=="C")
pwmtbl5[3,i]<- sum(motifrev[,i]=="G")
pwmtbl5[4,i]<- sum(motifrev[,i]=="T")
}
pwmtbl<-(pwmtbl4/sum(pwmtbl4[,1]))
pwmtbl2<-(pwmtbl5/sum(pwmtbl5[,1]))
#A=1 C=2 G=3 T=4
colmap<-c("1"="#cc0000","2"="blue","3"="gold2","4"="#2baf2b")
pwm <- makePWM(pwmtbl)
pwm2 <- makePWM(pwmtbl2)
# png(file=outname2, width = 1500, height = 750 )
# par(bg=NA)
# seqLogo(pwm)
# dev.off()
# png(file=outname4, width = 1500, height = 750 )
# par(bg=NA)
# seqLogo(pwm2)
# dev.off()
pwm3 <- makePWM(pwmtbl3)
weight<-pwm3@ic
d  <- daisy(motifsp3, metric="gower", weights=weight)
hc <- hclust(d, method="complete")
png(file=outname, width = 1500, height = 750)
par(bg=NA)
heatmap.2(motifsp3,col=colmap,Rowv=as.dendrogram(hc),Colv=FALSE, tracecol=NA, key=FALSE,labRow = FALSE,labCol = FALSE, dendrogram="none",main=paste("Sequence count",length(motif)))
dev.off()
d  <- daisy(motifsp5, metric="gower", weights=weight)
hc <- hclust(d, method="complete")
png(file=outname3, width = 1500, height = 750)
par(bg=NA)
heatmap.2(motifsp5,col=colmap,Rowv=as.dendrogram(hc),Colv=FALSE, tracecol=NA, key=FALSE,labRow = FALSE,labCol = FALSE, dendrogram="none",main=paste("Sequence count",length(motif)))
dev.off()
}else{png(file=outname, width = 600, height = 600)
dev.off()}
}}
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
t<-"g"
names(g)="a"
names(t)="a"
names(t)=="a"
t<-c("g","k")
names(t)==c("a","b)"
names(t)==c("a","b")
colnames(t)<-c("a", "b")
names(t)=="A"
names(t)=="A","B"
names(t)==c("A","B")
names(t)==names("A","B")
names(t)
t
t<-data.frame(t)
colnames(t)<-c("a","b")
View(t)
t<-data.frame(t(t))
names(t)==c("A","B")
names(t)=c("A","B")
names(t)=="A"
any(names(t)=="A")
!any(names(t)=="A")
!(any(names(t)=="A"))
!(any(names(t)=="C"))
!any(names(t)=="C")
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
read.csv("TF_data_files/Data/Cbf1_geneTargetList_191010.csv")
getwd()
setwd("C:/Users/davidju/Documents/GitHub/T-rEx Sysbio/T-rEx/TF_data_files/Data)
setwd("C:/Users/davidju/Documents/GitHub/T-rEx Sysbio/T-rEx/TF_data_files/Data")
t<-read.csv("TF_data_files/Data/Cbf1_geneTargetList_191010.csv")
t<-read.csv("Cbf1_geneTargetList_191010.csv")
p<-read.csv("Cbf1_geneTargetList_20191104.csv")
View(p)
q<-merge(t,p,by="X")
q<-merge(t,p,by="X",all=TRUE)
View(q)
q[is.na(q)==0]
q<-q[is.na(q)==0]
q<-merge(t,p,by="X",all=TRUE)
q<-q[is.na(q)]==0
q<-merge(t,p,by="X",all=TRUE)
q[is.na(q)]=0
write.csv(q,"Cbf1_geneTargetList_191105.csv")
runApp('~/GitHub/T-rEx Sysbio/T-rEx')
#Set up the TFs, colors and the conditions used
name.TF<-c("Cat8","Cbf1","Cst6","Ert1","Gcn4","Gcr1","Gcr2","Hap1","Hap4","Ino2","Ino4","Leu3","Oaf1","Pip2","Rds2","Rgt1","Rtg1","Rtg3","Sip4","Stb5","Sut1","Tye7")
#For each new TF added a new color must be set and added in rinputs
myColors.TF<-c("#a6cee3","#1f78b4","#244282","#ff9c63","#f16913","#b2df8a","#ffe60c","#33a02c","#3b5998" ,"#3ab4f4","#5200aa","#e31a1c","#fdbf6f","#ff7f00","#115e0c","#cab2d6","#7fcdbb","#6a3d9a","#b0b227","#e20002","#dd3497","#b15928")
name.Cond<-c("Glu","Nit","Eth","Ana", "Ypd")
name.Cond<-c("Glu","Nit","Eth","Ana","Ypd")
file.name<-list.files(path="TF_data_files/Data/",pattern=paste(i,"(.*)_GEManalysis_(.*).csv$",sep=""))
setwd("C:/Users/davidju/Documents/GitHub/T-rEx Sysbio/T-rEx/")
file.name<-list.files(path="TF_data_files/Data/",pattern=paste(i,"(.*)_GEManalysis_(.*).csv$",sep=""))
file.name
file.name<-list.files(path="TF_data_files/Data/",pattern=paste("Cbf1","(.*)_GEManalysis_(.*).csv$",sep=""))
datafile <-tryCatch({read.csv(paste0("TF_data_files/Data/", file.name),sep=",")},
error=function(file){
dummyvec<-data.frame(NA,NA,NA,NA,NA,NA,NA,NA,NA)
colnames(dummyvec)<-c("X","Gene","Chr","Pos","Strand","DistanceTSS","Strength","Condition","TF")
return(dummyvec) },silent=TRUE)
View(datafile)
read.csv(paste("TF_data_files/Data/Cbf1_GEManalysis_191105.csv",sep=""),sep=",")
file.name<-list.files(path="TF_data_files/Data/",pattern=paste("Cbf1","(.*)_GEManalysis_(.*).csv$",sep=""))
file.name
runApp()
t<-c( Abf1  Cat8  Cbf1  Cst6  Ert1  Gcn4  Gcr1  Gcr2  Hap1  Hap4  Ino2  Ino4  Leu3  Mcm1  Oaf1  Pip2  Rap1  Rds2  Reb1  Rgt1  Rtg1  Rtg3  Sip4
TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Stb5  Sut1  Tye7
FALSE FALSE FALSE )
t<-c("a"=TRUE,"b"=false)
t<-c("a"=TRUE,"b"=FALSE)
t[t==TRUE]
p<- t[t==TRUE]
p
p<- names(t[t==TRUE])
p
t<-c("a"=TRUE,"b"=FALSE,"c"=TRUE)
p<- names(t[t==TRUE])
p
runApp()
length(p)
p[1]
#Generate data for statistical analysis
Stat_data_func<-function(tf,cond,data.New.TF) {
data_out<-geneList
for (i in tf){
if(i=="New_TF"){
datafile<-data.New.TF
condTF<-datafile[names(datafile) == cond]
datafile.2<-data.frame(datafile$X,condTF)
colnames(datafile.2)<-c("GeneC",i)
data_out<-merge(data_out,datafile.2, by="GeneC", all=TRUE)
}else{
name<-list.files(path="TF_data_files/Data/",pattern=paste(i,"_geneTargetList_(.*).csv$",sep=""))
datafile <-tryCatch({read.csv(paste0("TF_data_files/Data/",name),sep=",")},
error=function(file){
dummyvec<-data.frame(t(rep(NA, (length(name.Cond)+1))))
colnames(dummyvec)<-c("X",name.Cond)
return(dummyvec) },silent = TRUE)
if( !any(names(datafile)==cond)){
dummyvec<-data.frame(t(rep(NA, (length(name.Cond)+1))))
colnames(dummyvec)<-c("X",name.Cond)
datafile<-dummyvec
}
condTF<-datafile[names(datafile) == cond]
datafile.2<-data.frame(datafile$X,condTF)
colnames(datafile.2)<-c("GeneC",i)
data_out<-merge(data_out,datafile.2, by="GeneC", all=TRUE)
}}
return(data_out)
}
p="Cat8"
Stat_data_func(p,"Glu","FALSE")
#Get the current genelist
geneList<-data.frame(TSS.start$GeneName, TSS.start$Gene)
#Load TSS start position
TSS.start<-read.csv(paste("TF_data_files/Resources/","190704_TSSData.tsv",sep=""), sep="\t", header=TRUE)
#Get the current genelist
geneList<-data.frame(TSS.start$GeneName, TSS.start$Gene)
colnames(geneList)<-c("Gene","GeneC")
gene.Systematic<-data.frame(geneList[,1])
colnames(gene.Systematic)<-c("GeneS")
gene.Common<-data.frame(geneList[,2])
colnames(gene.Common)<-c("GeneC")
Stat_data_func(p,"Glu","FALSE")
runApp()
TFs<-c("Cat8","Cbf1")
cond="Glu"
# if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
print("hej")
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
if(i==1){
TFgeneList2<-TFgeneList
}else{
TFgeneList2<-intersect(TFgeneList,TFgeneList2)
}
}
print(TFgeneList2)
print(TFgeneList2[1,])
print(TFgeneList2[,1])
# if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
print("hej")
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[,1]
if(i==1){
TFgeneList2<-TFgeneList
}else{
TFgeneList2<-intersect(TFgeneList,TFgeneList2)
}
}
print(TFgeneList2)
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
View(TFgeneList)
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[,TFgeneList[,3]>0]
TFgeneList<-TFgeneList[TFgeneList[,3]>0]
TFgeneList<-TFgeneList[,3]>0
# if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
print("hej")
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[,3]>0
TFgeneList<-TFgeneList[,1]
if(i==1){
TFgeneList2<-TFgeneList
}else{
TFgeneList2<-intersect(TFgeneList,TFgeneList2)
}
}
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[,3]>0
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
View(TFgeneList)
TFgeneList[,3]
!is.na(TFgeneList[,3])
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE)]
TFgeneList<-TFgeneList[,!is.na(TFgeneList[,3]==TRUE)]
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
View(TFgeneList)
TFgeneList<-TFgeneList[TFgeneList[,3]>0),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
View(TFgeneList)
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-TFgeneList[,1]
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
View(TFgeneList)
TFgeneList<-TFgeneList[,1]
TFgeneList
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
View(TFgeneList)
# if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
print("hej")
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
if(i==1){
TFgeneList2<-TFgeneList
}else{
TFgeneList2<-intersect(TFgeneList,TFgeneList2)
}
}
print(TFgeneList2)
TFs<-("Ino2","Ino4")
TFs<-c("Ino2","Ino4")
# if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
print("hej")
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
if(i==1){
TFgeneList2<-TFgeneList
}else{
TFgeneList2<-intersect(TFgeneList,TFgeneList2)
}
}
print(TFgeneList2)
TFgeneList<-Stat_data_func(TFs[1], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
TFgeneList2<-TFgeneList
TFgeneList<-Stat_data_func(TFs[2], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
TFgeneList3<-intersect(TFgeneList,TFgeneList2)
colnames(TFgeneList)<-"Gene"
TFgeneList2<-TFgeneList
TFgeneList<-Stat_data_func(TFs[1], cond,"FALSE")
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
colnames(TFgeneList)<-"Gene"
TFgeneList3<-intersect(TFgeneList,TFgeneList2)
View(TFgeneList)
View(TFgeneList2)
TFgeneList3<-intersect(TFgeneList[,1],TFgeneList2[,1])
TFgeneList3
runApp()
TFs<-c("Gcr1","Gcr2")
TFgeneList<-c()
TFgeneList2<-c()
print(TFs)
if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
print(TFs[i])
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
colnames(TFgeneList)<-"Gene"
print(i)
if(i==1){
TFgeneList2<-TFgeneList[,1]
print("hej")
}else{
TFgeneList2<-intersect(TFgeneList[,1],TFgeneList2[,1])
print("hej2")
}
}
print(TFgeneList2)
print(TFgeneList)
return(TFgeneList2)
}
TFgeneList<-c()
TFgeneList2<-c()
print(TFs)
if(length(TFs)==1){return("Not enough TFs selected")}else{
for (i in 1:length(TFs)){
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
print(TFs[i])
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
colnames(TFgeneList)<-"Gene"
print(i)
if(i==1){
TFgeneList2<-TFgeneList
print("hej")
}else{
TFgeneList2<-intersect(TFgeneList[,1],TFgeneList2[,1])
print("hej2")
}
}
print(TFgeneList2)
print(TFgeneList)
return(TFgeneList2)
}
TFs<-c("Gcr1","Gcr2","Tye7")
TFgeneList<-c()
TFgeneList2<-c()
print(TFs)
for (i in 1:length(TFs)){
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
print(TFs[i])
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
colnames(TFgeneList)<-"Gene"
print(i)
if(i==1){
TFgeneList2<-TFgeneList
print("hej")
}else{
TFgeneList2<-intersect(TFgeneList[,1],TFgeneList2[,1])
print("hej2")
}
}
TFgeneList<-c()
TFgeneList2<-c()
for (i in 1:length(TFs)){
TFgeneList<-Stat_data_func(TFs[i], cond,"FALSE")
print(TFs[i])
TFgeneList<-TFgeneList[!is.na(TFgeneList[,3]==TRUE),]
TFgeneList<-TFgeneList[TFgeneList[,3]>0,]
TFgeneList<-data.frame(TFgeneList[,1])
colnames(TFgeneList)<-"Gene"
print(i)
if(i==1){
TFgeneList2<-TFgeneList
print("hej")
}else{
TFgeneList2<-data.frame(intersect(TFgeneList[,1],TFgeneList2[,1]))
print("hej2")
}
}
TFgeneList3
TFgeneList2
runApp()
cbind(TFgeneList,TFgeneList2)
cbind(TFgeneList,TFgeneList2,fill=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##upload TrEx
options(repos = BiocInstaller::biocinstallRepos())
options(repos = BiocManager::repositories())
getOption("repos")
runApp()
runApp()
runApp()
runApp()
runApp()
